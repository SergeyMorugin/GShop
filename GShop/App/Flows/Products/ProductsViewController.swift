//
//  ProductsViewController.swift
//  GShop
//
//  Created by Matthew on 18.03.2021.
//  Copyright (c) 2021 Ostagram Inc.. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ProductsDisplayLogic: class {
    func display(viewModel: Products.Show.ViewModel)
}

class ProductsViewController: UITableViewController, ProductsDisplayLogic {
    var interactor: ProductsBusinessLogic?
    var router: (NSObjectProtocol & ProductsRoutingLogic & ProductsDataPassing)?
    var products: [Product]! = []
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = ProductsInteractor()
        interactor.worker = RequestFactory().makeCatalogData()
        let presenter = ProductsPresenter()
        let router = ProductsRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    override func viewDidLoad() {
        super.viewDidLoad()
        self.tableView.delegate = self
        self.tableView.dataSource = self
        fetchProducts()
    }
    
    // MARK: Do something
    
    func fetchProducts() {
        let request = Products.Show.Request()
        interactor?.fetchProducts(request: request)
    }
    
    func display(viewModel: Products.Show.ViewModel) {
        if let items = viewModel.items {
            self.products = items
        } else {
            self.products = []
        }
        self.tableView.reloadData()
        
        if viewModel.showModal {
            let alert = UIAlertController(
                title: "",
                message: viewModel.textMessage,
                preferredStyle: UIAlertController.Style.alert)
            alert.addAction(UIAlertAction(title: "Ok", style: UIAlertAction.Style.default, handler: nil))
            self.present(alert, animated: true, completion: nil)
        }
    }
}

extension ProductsViewController {
    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        // #warning Incomplete implementation, return the number of rows
        return products.count
    }
    
    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: "productsCell", for: indexPath)
        guard
            let productsCell = cell as? ProductsTableViewCell
        else {
            return cell
        }
        // Configure the cell...
        let product = self.products[indexPath.row]
        productsCell.productName.text = product.name
        productsCell.productPrice.text = String(format: "$%.02f", Float(product.price)/100)
        return productsCell
    }
    
}
